declare const lightshaftv = "\nattribute vec4 fx;\n\nuniform vec2 uResolution;\n\nvarying vec4 vFx;\nvarying vec2 vUv;\nvarying vec2 vResolution;\nvarying vec2 vScreenUv;\n\nvoid main() {\n    vec3 aspectRatioCorrected = position * vec3(uResolution.y / uResolution.x, 1.0, 1.0);\n\n    vFx = fx;\n    vUv = uv;\n    vResolution = uResolution;\n\n    vScreenUv = aspectRatioCorrected.xy * 0.5 + 0.5;\n\n    gl_Position = vec4(aspectRatioCorrected, 1.0);\n}\n";
declare const lightshaftf = "\nvarying vec4 vFx;\nvarying vec2 vUv;\nvarying vec2 vScreenUv;\nvarying vec2 vResolution;\n\nuniform sampler2D uTexture1;\nuniform sampler2D uTexture2;\n\nvec2 hash(vec2 p) {\n\tp = vec2(dot(p, vec2(127.1, 311.7)),\n\t\t\t dot(p, vec2(269.5, 183.3)));\n\treturn -1.0 + 2.0 * fract(sin(p) * 43758.5453123);\n}\n\nfloat noise(in vec2 p) {\n\tconst float K1 = 0.366025404; // (sqrt(3)-1)/2;\n\tconst float K2 = 0.211324865; // (3-sqrt(3))/6;\n\t\n\tvec2 i = floor(p + (p.x + p.y) * K1);\n\t\n\tvec2 a = p - i + (i.x + i.y) * K2;\n\tvec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0 * K2;\n\n\tvec2 o = (a.x > a.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n\t\n\tvec3 h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);\n\t\n\tvec3 n = h * h * h * h * vec3(dot(a, hash(i + 0.0)), dot(b, hash(i + o)), dot(c, hash(i + 1.0)));\n\t\n\treturn dot(n, vec3(70.0));\n}\n\nfloat fbm(vec2 uv) {\n\tfloat f;\n\tmat2 m = mat2(1.6, 1.2, -1.2,  1.6);\n\tf  = 0.5000 * noise(uv); uv = m * uv;\n\tf += 0.2500 * noise(uv); uv = m * uv;\n\tf += 0.1250 * noise(uv); uv = m * uv;\n\tf += 0.0625 * noise(uv); uv = m * uv;\n\tf = 0.5 + 0.5 * f;\n\treturn f;\n}\n\nvoid main() {\n    vec2 uvOffs = vec2(     \n        vFx.z,  // fbm(vec2(vFx.z, 0.0)), \n        vFx.w   // fbm(vec2(0.0, vFx.w))\n    ) * vFx.x * 0.015;\n\n    vec3 col1 = texture2D(uTexture1, vScreenUv + uvOffs).rgb;\n    vec3 col2 = col1 * 1.3 * vec3(1.0, 0.5, 0.25);\n\n    col1 = col1 * vec3(1.0, 0.6, 0.5);\n\n    vec3 col = mix(col1, col2, vFx.y);\n\n    vec2 uv = vec2(vUv.x, pow(vUv.y, 2.0));\n\n    float timeOpacity = vFx.x;\n    if (timeOpacity > 0.5) {\n        timeOpacity = 1.0 - smoothstep(0.5, 1.0, timeOpacity);\n    } else {\n        timeOpacity = timeOpacity / 0.5;\n    }\n\n    float sphereAlpha = max(1.0 - smoothstep(0.3, 0.5, length(uv - vec2(0.5))), 0.0);\n    float a = timeOpacity * sphereAlpha;\n\n    a *= 0.25;\n\n    if(length(vUv - vec2(0.5)) > 0.499) a = 0.0;\n\n    gl_FragColor = vec4(col * a, 0.0);\n}\n";
export { lightshaftv, lightshaftf };
